import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
import time


class CalculatorSeleniumTestsCases(unittest.TestCase):

    def setUp(self):
        "Initializing selenium driver, going to page, maximizing window and setting break time"
        self.driver = webdriver.Chrome()
        self.driver.maximize_window()
        self.driver.get("https://calcfree.azurewebsites.net")
        self.time_sleep = 1.5
    
    def tearDown(self):
        "Quiting selenium"
        self.driver.quit()
    
    def test_page(self):
        "Test checks if all of page functions works"
        page = self.driver.find_element(By.ID, "calculator")
        page.click()
        time.sleep(self.time_sleep)
        expression_text_field = self.driver.find_element(By.ID, "expression")
        self.assertFalse(expression_text_field is None, msg = "Expression text field should be on the page")
        expression_text_field_text = expression_text_field.text
        self.assertEqual(len(expression_text_field_text), 0, "Expression should be empty on start")
        answer_text_field = self.driver.find_element(By.ID, "answer")
        self.assertFalse(answer_text_field is None, msg = "Answer text field should be on the page")
        answer_text_field_text = answer_text_field.text
        self.assertEqual(len(answer_text_field_text), 0, "Answer should be empty on start")
        clear_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='C']")
        brackets_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='()']")
        percent_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='%']")
        slash_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='/']")
        button7 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='7']")
        button8 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='8']")
        button9 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='9']")
        multiply_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='*']")
        button4 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='4']")
        button5 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='5']")
        button6 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='6']")
        minus_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='-']")
        button1 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='1']")
        button2 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='2']")
        button3 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='3']")
        plus_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='+']")
        sign_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='+/-']")
        button0 = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='0']")
        comma_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value=',']")
        equal_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='button'][value='=']")
        button7.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "7", "Answer should change")
        multiply_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "", "Answer should change")
        button1.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "7", "Answer should change")
        plus_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "", "Answer should change")
        brackets_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "", "Answer should change")
        button2.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "9", "Answer should change")
        percent_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2%", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "7,02", "Answer should change")
        minus_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2%-", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "", "Answer should change")
        button3.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2%-3", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "4,02", "Answer should change")
        brackets_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2%-3)", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "4,02", "Answer should change")
        plus_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2%-3)+", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "", "Answer should change")
        button4.click()
        time.sleep(self.time_sleep)
        button5.click()
        time.sleep(self.time_sleep)
        button6.click()
        time.sleep(self.time_sleep)
        slash_button.click()
        time.sleep(self.time_sleep)
        button8.click()
        time.sleep(self.time_sleep)
        comma_button.click()
        time.sleep(self.time_sleep)
        button9.click()
        time.sleep(self.time_sleep)
        sign_button.click()
        time.sleep(self.time_sleep)
        brackets_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2%-3)+456/(-8,9)", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "-47,21595505617978", "Answer should change")
        multiply_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2%-3)+456/(-8,9)*", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "", "Answer should change")
        button0.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "7*1+(2%-3)+456/(-8,9)*0", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "4,02", "Answer should change")
        equal_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "4,02", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "", "Answer should change")
        clear_button.click()
        time.sleep(self.time_sleep)
        expression_text_field_text = expression_text_field.get_attribute("value")
        self.assertEqual(expression_text_field_text, "", "Expression should change")
        answer_text_field_text = answer_text_field.get_attribute("value")
        self.assertEqual(answer_text_field_text, "", "Answer should change")